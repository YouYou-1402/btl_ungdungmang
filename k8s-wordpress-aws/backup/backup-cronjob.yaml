apiVersion: batch/v1
kind: CronJob
metadata:
  name: wordpress-mysql-backup
  namespace: wordpress
  labels:
    app: backup
spec:
  # Chạy backup mỗi ngày lúc 2:00 AM (UTC)
  schedule: "0 2 * * *"
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        metadata:
          labels:
            app: backup
            cronjob: wordpress-mysql-backup
        spec:
          restartPolicy: OnFailure
          containers:
          
          # Container 1: MySQL Backup
          - name: mysql-backup
            image: amazon/aws-cli:2.13.0
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              # Install mysql client
              yum install -y mysql
              
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_DIR="/backup/mysql"
              RETENTION_DAYS=30
              
              echo "=========================================="
              echo "Starting MySQL Backup"
              echo "Timestamp: $TIMESTAMP"
              echo "=========================================="
              
              mkdir -p $BACKUP_DIR
              
              # Backup MySQL
              echo "Dumping MySQL database..."
              mysqldump -h mysql-service \
                -u root \
                -p${MYSQL_ROOT_PASSWORD} \
                --all-databases \
                --single-transaction \
                --quick \
                --lock-tables=false \
                --routines \
                --triggers \
                --events \
                --set-gtid-purged=OFF \
                | gzip > $BACKUP_DIR/mysql_backup_${TIMESTAMP}.sql.gz
              
              if [ $? -eq 0 ]; then
                echo "✓ MySQL backup completed successfully"
                ls -lh $BACKUP_DIR/mysql_backup_${TIMESTAMP}.sql.gz
              else
                echo "✗ MySQL backup failed!"
                exit 1
              fi
              
              # Upload to S3
              echo "Uploading to S3..."
              aws s3 cp $BACKUP_DIR/mysql_backup_${TIMESTAMP}.sql.gz \
                s3://${S3_BUCKET_NAME}/mysql/mysql_backup_${TIMESTAMP}.sql.gz \
                --storage-class STANDARD_IA
              
              if [ $? -eq 0 ]; then
                echo "✓ Upload to S3 completed"
              else
                echo "✗ Upload to S3 failed!"
                exit 1
              fi
              
              # Cleanup old local backups
              echo "Cleaning up old local backups..."
              find $BACKUP_DIR -name "mysql_backup_*.sql.gz" -type f -mtime +7 -delete
              
              # Cleanup old S3 backups
              echo "Cleaning up old S3 backups (older than ${RETENTION_DAYS} days)..."
              CUTOFF_DATE=$(date -d "${RETENTION_DAYS} days ago" +%Y-%m-%d)
              aws s3 ls s3://${S3_BUCKET_NAME}/mysql/ | while read -r line; do
                FILE_DATE=$(echo $line | awk '{print $1}')
                FILE_NAME=$(echo $line | awk '{print $4}')
                if [[ "$FILE_DATE" < "$CUTOFF_DATE" ]]; then
                  echo "Deleting old backup: $FILE_NAME"
                  aws s3 rm s3://${S3_BUCKET_NAME}/mysql/$FILE_NAME
                fi
              done
              
              echo "=========================================="
              echo "MySQL Backup Completed Successfully!"
              echo "=========================================="
            env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: AWS_DEFAULT_REGION
            - name: S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: S3_BUCKET_NAME
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                memory: "256Mi"
                cpu: "200m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          
          # Container 2: WordPress Files Backup
          - name: wordpress-backup
            image: amazon/aws-cli:2.13.0
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_DIR="/backup/wordpress"
              RETENTION_DAYS=30
              
              echo "=========================================="
              echo "Starting WordPress Files Backup"
              echo "Timestamp: $TIMESTAMP"
              echo "=========================================="
              
              mkdir -p $BACKUP_DIR
              
              # Backup WordPress files
              echo "Creating WordPress files archive..."
              cd /wordpress
              tar -czf $BACKUP_DIR/wordpress_files_${TIMESTAMP}.tar.gz \
                --exclude='wp-content/cache/*' \
                --exclude='wp-content/uploads/cache/*' \
                --exclude='*.log' \
                .
              
              if [ $? -eq 0 ]; then
                echo "✓ WordPress files backup completed"
                ls -lh $BACKUP_DIR/wordpress_files_${TIMESTAMP}.tar.gz
              else
                echo "✗ WordPress files backup failed!"
                exit 1
              fi
              
              # Upload to S3
              echo "Uploading to S3..."
              aws s3 cp $BACKUP_DIR/wordpress_files_${TIMESTAMP}.tar.gz \
                s3://${S3_BUCKET_NAME}/wordpress/wordpress_files_${TIMESTAMP}.tar.gz \
                --storage-class STANDARD_IA
              
              if [ $? -eq 0 ]; then
                echo "✓ Upload to S3 completed"
              else
                echo "✗ Upload to S3 failed!"
                exit 1
              fi
              
              # Cleanup old local backups
              echo "Cleaning up old local backups..."
              find $BACKUP_DIR -name "wordpress_files_*.tar.gz" -type f -mtime +7 -delete
              
              # Cleanup old S3 backups
              echo "Cleaning up old S3 backups (older than ${RETENTION_DAYS} days)..."
              CUTOFF_DATE=$(date -d "${RETENTION_DAYS} days ago" +%Y-%m-%d)
              aws s3 ls s3://${S3_BUCKET_NAME}/wordpress/ | while read -r line; do
                FILE_DATE=$(echo $line | awk '{print $1}')
                FILE_NAME=$(echo $line | awk '{print $4}')
                if [[ "$FILE_DATE" < "$CUTOFF_DATE" ]]; then
                  echo "Deleting old backup: $FILE_NAME"
                  aws s3 rm s3://${S3_BUCKET_NAME}/wordpress/$FILE_NAME
                fi
              done
              
              echo "=========================================="
              echo "WordPress Backup Completed Successfully!"
              echo "=========================================="
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: AWS_DEFAULT_REGION
            - name: S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: aws-s3-backup-secret
                  key: S3_BUCKET_NAME
            volumeMounts:
            - name: wordpress-storage
              mountPath: /wordpress
              readOnly: true
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                memory: "256Mi"
                cpu: "200m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          
          volumes:
          - name: wordpress-storage
            persistentVolumeClaim:
              claimName: wordpress-pvc
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc
